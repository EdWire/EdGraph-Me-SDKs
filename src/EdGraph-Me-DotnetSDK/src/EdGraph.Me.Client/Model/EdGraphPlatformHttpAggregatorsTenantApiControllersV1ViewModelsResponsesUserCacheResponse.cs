/*
 * Me Api
 *
 * Me Api - v1.0
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdGraph.Me.Client.Client.OpenAPIDateConverter;

namespace EdGraph.Me.Client.Model
{
    /// <summary>
    /// EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheResponse
    /// </summary>
    [DataContract(Name = "EdGraph.Platform.HttpAggregators.Tenant.Api.Controllers.v1.ViewModels.Responses.UserCacheResponse")]
    public partial class EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheResponse" /> class.
        /// </summary>
        /// <param name="userName">The user name for this user..</param>
        /// <param name="email">The email address for this user..</param>
        /// <param name="firstName">The first name for this user..</param>
        /// <param name="lastName">The last name for this user..</param>
        /// <param name="preferences">List of preferences associated with this user.</param>
        /// <param name="tenants">List of tenants associated with this user.</param>
        /// <param name="browserDebugEnabled">Flag to indicate if the debug mode for user is enabled.</param>
        /// <param name="extensions">extensions.</param>
        /// <param name="selectedTenant">selectedTenant.</param>
        /// <param name="tenantsTotalCount">The total count of active tenants associated with this user.</param>
        public EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheResponse(string userName = default(string), string email = default(string), string firstName = default(string), string lastName = default(string), List<IdentityApiUserV1Preference> preferences = default(List<IdentityApiUserV1Preference>), List<EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheTenantResponse> tenants = default(List<EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheTenantResponse>), bool browserDebugEnabled = default(bool), List<IdentityApiUserV1UserExtension> extensions = default(List<IdentityApiUserV1UserExtension>), EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheTenantResponse selectedTenant = default(EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheTenantResponse), int tenantsTotalCount = default(int))
        {
            this.UserName = userName;
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Preferences = preferences;
            this.Tenants = tenants;
            this.BrowserDebugEnabled = browserDebugEnabled;
            this.Extensions = extensions;
            this.SelectedTenant = selectedTenant;
            this.TenantsTotalCount = tenantsTotalCount;
        }

        /// <summary>
        /// The user name for this user.
        /// </summary>
        /// <value>The user name for this user.</value>
        [DataMember(Name = "userName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// The email address for this user.
        /// </summary>
        /// <value>The email address for this user.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The first name for this user.
        /// </summary>
        /// <value>The first name for this user.</value>
        [DataMember(Name = "firstName", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name for this user.
        /// </summary>
        /// <value>The last name for this user.</value>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// List of preferences associated with this user
        /// </summary>
        /// <value>List of preferences associated with this user</value>
        [DataMember(Name = "preferences", EmitDefaultValue = true)]
        public List<IdentityApiUserV1Preference> Preferences { get; set; }

        /// <summary>
        /// List of tenants associated with this user
        /// </summary>
        /// <value>List of tenants associated with this user</value>
        [DataMember(Name = "tenants", EmitDefaultValue = true)]
        public List<EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheTenantResponse> Tenants { get; set; }

        /// <summary>
        /// Flag to indicate if the debug mode for user is enabled
        /// </summary>
        /// <value>Flag to indicate if the debug mode for user is enabled</value>
        [DataMember(Name = "browserDebugEnabled", EmitDefaultValue = true)]
        public bool BrowserDebugEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name = "extensions", EmitDefaultValue = true)]
        public List<IdentityApiUserV1UserExtension> Extensions { get; set; }

        /// <summary>
        /// Gets or Sets SelectedTenant
        /// </summary>
        [DataMember(Name = "selectedTenant", EmitDefaultValue = false)]
        public EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheTenantResponse SelectedTenant { get; set; }

        /// <summary>
        /// The total count of active tenants associated with this user
        /// </summary>
        /// <value>The total count of active tenants associated with this user</value>
        [DataMember(Name = "tenantsTotalCount", EmitDefaultValue = false)]
        public int TenantsTotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EdGraphPlatformHttpAggregatorsTenantApiControllersV1ViewModelsResponsesUserCacheResponse {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  Tenants: ").Append(Tenants).Append("\n");
            sb.Append("  BrowserDebugEnabled: ").Append(BrowserDebugEnabled).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("  SelectedTenant: ").Append(SelectedTenant).Append("\n");
            sb.Append("  TenantsTotalCount: ").Append(TenantsTotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
